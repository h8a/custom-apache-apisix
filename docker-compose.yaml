services:
  etcd:
    image: bitnami/etcd:3.4.9
    user: root
    restart: always
    volumes:
      - ./docker/etcd_data:/etcd_data
    environment:
      ETCD_DATA_DIR: /etcd_data
      ETCD_ENABLE_V2: "true"
      ALLOW_NONE_AUTHENTICATION: "no"
      ETCD_ROOT_PASSWORD: $ETCD_ROOT_PASSWORD
      ETCD_ADVERTISE_CLIENT_URLS: "http://etcd:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
    healthcheck:
      test: ["CMD-SHELL", "etcdctl", "endpoint", "health", "--cluster=false"]
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "2379:2379/tcp"
    networks:
      - apisix

  apisix:
    image: apache/apisix:2.13.1-alpine
    restart: always
    environment:
      DOMAIN_NAME: $DOMAIN_NAME
    ports:
      - "9080:9080"
      - "9443:9443"
    volumes:
      - ./docker/apisix/config.yaml:/usr/local/apisix/conf/config.yaml
      - ./docker/nginx/certbot/conf:/etc/letsencrypt
    networks:
      - apisix
    depends_on:
      etcd:
        condition: service_healthy

  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.1-alpine
    restart: always
    environment:
      ENABLE_PROXY: false
      ETCD_ROOT_PASSWORD: $ETCD_ROOT_PASSWORD
    ports:
      - 9000:9000
    volumes:
      - ./docker/apisix/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    networks:
      - apisix
    depends_on:
      etcd:
        condition: service_healthy

  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/certbot/conf:/etc/letsencrypt
      - ./docker/nginx/certbot/www:/var/www/certbot
    entrypoint: /entrypoint.sh
    environment:
      DOMAIN_NAME: $DOMAIN_NAME
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - apisix
      - apisix-dashboard
    networks:
      - apisix

  certbot:
    image: certbot/certbot
    volumes:
      - ./docker/nginx/certbot/conf:/etc/letsencrypt
      - ./docker/nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - apisix

networks:
  apisix:
    driver: bridge
